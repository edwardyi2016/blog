(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{225:function(e,r,a){"use strict";a.r(r);var t=a(0),u=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,r=e.$createElement,a=e._self._c||r;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"queue相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue相关","aria-hidden":"true"}},[e._v("#")]),e._v(" Queue相关")]),e._v(" "),a("h2",{attrs:{id:"类图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类图","aria-hidden":"true"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),a("p",[a("img",{attrs:{src:"/images/Queue%E7%9B%B8%E5%85%B3/Queue%E7%B1%BB%E5%9B%BE.png",alt:"Queue类图"}})]),e._v(" "),a("p",[e._v('Queue用于模拟"队列"这种数据结构，其特性为FIFO先进先出。队列的头部保存着队列中存放时间最长的元素，队列的尾部保存着队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素，队列不允许随机访问元素。')]),e._v(" "),a("h2",{attrs:{id:"queue实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue实现类","aria-hidden":"true"}},[e._v("#")]),e._v(" Queue实现类")]),e._v(" "),a("h3",{attrs:{id:"priorityqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue","aria-hidden":"true"}},[e._v("#")]),e._v(" PriorityQueue")]),e._v(" "),a("p",[e._v("PriorityQueue优先级队列，它并不是一个比较标准的队列实现，PriorityQueue保存元素的顺序并不是按照加入队列的顺序，而是按照队列元素的大小进行排序的。")]),e._v(" "),a("h3",{attrs:{id:"deque"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deque","aria-hidden":"true"}},[e._v("#")]),e._v(" Deque")]),e._v(" "),a("p",[e._v("Deque双端队列接口，双端队列可以同时从两端来添加、删除元素，因此Deque的实现类既可以当成队列使用、也可以当成栈使用。")]),e._v(" "),a("h3",{attrs:{id:"arraydeque"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque","aria-hidden":"true"}},[e._v("#")]),e._v(" ArrayDeque")]),e._v(" "),a("p",[e._v("ArrayDeque是一个基于数组的双端队列，和ArrayList类似，它们的底层都采用一个可动态扩容的Object[]数组来存储集合元素。")])])}],!1,null,null,null);r.default=u.exports}}]);