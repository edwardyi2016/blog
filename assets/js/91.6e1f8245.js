(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{222:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"set相关"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set相关","aria-hidden":"true"}},[t._v("#")]),t._v(" Set相关")]),t._v(" "),s("h2",{attrs:{id:"类图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类图","aria-hidden":"true"}},[t._v("#")]),t._v(" 类图")]),t._v(" "),s("p",[t._v("Set接口继承Collection接口")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/Set%E7%9B%B8%E5%85%B3/Set%E7%B1%BB%E5%9B%BE.png",alt:"Set类图"}})]),t._v(" "),s("p",[t._v("Set集合里的多个对象之间没有明显的顺序。Set继承自Collection接口，不能包含有重复元素（这是整个Set相关类的共有属性）。")]),t._v(" "),s("p",[t._v("Set判断两个对象相同使用的是equals方法。也就是说，当Set中加入一个新元素时，如果这个新元素对象和Set中已有对象进行equals比较都返回false，则Set就会接收这个新元素对象加入，否则拒绝。")]),t._v(" "),s("p",[t._v("因为Set的这个制约，在使用Set集合的时候，需要为Set集合里的元素的实现类实现一个有效的equals(Object)方法。")]),t._v(" "),s("h2",{attrs:{id:"set实现类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set实现类","aria-hidden":"true"}},[t._v("#")]),t._v(" Set实现类")]),t._v(" "),s("h3",{attrs:{id:"hashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashset","aria-hidden":"true"}},[t._v("#")]),t._v(" HashSet")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("集合关注点")]),t._v(" "),s("th",[t._v("结论")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("HashSet是否允许空")]),t._v(" "),s("td",[t._v("允许")])]),t._v(" "),s("tr",[s("td",[t._v("HashSet是否允许重复数据")]),t._v(" "),s("td",[t._v("不允许")])]),t._v(" "),s("tr",[s("td",[t._v("HashSet是否有序")]),t._v(" "),s("td",[t._v("无序")])]),t._v(" "),s("tr",[s("td",[t._v("HashSet是否线程安全")]),t._v(" "),s("td",[t._v("非线程安全")])])])]),t._v(" "),s("p",[t._v("HashSet时Set接口的典型实现，HashSet使用HASH算法来存储集合中的元素，因此具有良好的存取和查找性能。HashSet的底层实现其实是一个HashMap，该HashMap存储的键是元素对象，值则是HashSet中定义的PRESENT变量（Object对象）。使用add(E)方法向HashSet中添加重复的元素时，会返回false。contains方法用于判断HashSet中是否存在某个元素，实际上是使用元素对象的equals方法进行判断。HashSet的源码如下：")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" HashMap"),s("span",{pre:!0,attrs:{class:"token generics function"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("E"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dummy value to associate with an Object in the backing Map")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" Object PRESENT "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("E e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PRESENT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("null"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Object o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("h3",{attrs:{id:"linkedhashset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset","aria-hidden":"true"}},[t._v("#")]),t._v(" LinkedHashSet")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("集合关注点")]),t._v(" "),s("th",[t._v("结论")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("LinkedHashSet是否允许空")]),t._v(" "),s("td",[t._v("允许")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedHashSet是否允许重复数据")]),t._v(" "),s("td",[t._v("不允许")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedHashSet是否有序")]),t._v(" "),s("td",[t._v("有序")])]),t._v(" "),s("tr",[s("td",[t._v("LinkedHashSet是否线程安全")]),t._v(" "),s("td",[t._v("非线程安全")])])])]),t._v(" "),s("p",[t._v("LinkedHashSet集合也是根据元素的hashCode值来决定元素的存储位置，但和HashSet不同的是，它同时使用链表维护元素的次序，这样使的元素看起来是以插入的顺序保存的。")]),t._v(" "),s("p",[t._v("当遍历LinkdedHashSet集合里的元素时，LinkedHashSet将会按元素的添加顺序来访问集合里的元素。")]),t._v(" "),s("p",[t._v("LinkedHashSet需要维护元素的插入顺序，因此性能略低于HashSet的性能，但在迭代访问Set里的全部元素时（遍历）将有很好的性能（链表很适合进行遍历）。")]),t._v(" "),s("p",[t._v("LinkedHashSet底层实现是一个LinkedHashMap，通过LinkedHashMap，LinkedHashSet实现了元素的有序。")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("LinkedHashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loadFactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("HashSet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" initialCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" loadFactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" dummy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    map "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedHashMap")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialCapacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" loadFactor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h3",{attrs:{id:"treeset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#treeset","aria-hidden":"true"}},[t._v("#")]),t._v(" TreeSet")]),t._v(" "),s("p",[t._v("TreeSet是SortedSet接口的实现类，TreeSet可以确保集合元素处于排序状态。")]),t._v(" "),s("p",[t._v("SortedSet接口主要用于排序操作。")]),t._v(" "),s("h3",{attrs:{id:"enumset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#enumset","aria-hidden":"true"}},[t._v("#")]),t._v(" EnumSet")]),t._v(" "),s("p",[t._v("EnumSet是一个专门为枚举类设计的集合类，EnumSet中所有元素都必须是指定枚举类型的枚举值，该枚举类型在创建EnumSet时显式或隐式地指定。EnumSet地集合元素也是有序的，它们以枚举值在Enum类中的定义顺序来决定集合元素的顺序。")])])}],!1,null,null,null);a.default=n.exports}}]);